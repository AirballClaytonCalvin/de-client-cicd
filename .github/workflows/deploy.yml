name: Dash Enterprise Deploy
description: Dash Enterprise Deploy

on:
  push:
    branches: [main]
  pull_request:
    types: ['opened', 'edited', 'synchronize', 'closed']

jobs:
  deploy:
    name: 'Deploy to Dash Enterprise'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: plotly/de-deploy@v2
        with:
          DE_HOST: ${{ secrets.DE_HOST }}
          DE_USERNAME: ${{ secrets.DE_USERNAME }}
          DE_PASSWORD: ${{ secrets.DE_PASSWORD }}

inputs:
  DE_PASSWORD:
    description: Dash Enterprise password
    required: true
    type: string
  DE_HOST:
    description: Dash Enterprise host
    required: true
    type: string
  DE_USERNAME:
    description: Dash Enterprise username
    required: true
    type: string
  app_name:
    description: Name of the app to deploy. If not provided, the repository name will be used.
    required: false
    type: string
  
    
runs:
  using: composite
  steps:
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    - name: Install de-client==1.5.3
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install de-client==1.5.3 --extra-index-url=https://${{ inputs.DE_HOST }}/packages
    - name: Generate app name
      id: app_name
      shell: bash
      run: |
        # If an app name is not provided, use the repository name as the app name
        if [ -z "$APP_NAME" ]; then
            repository="$GITHUB_REPOSITORY"
            APP_NAME=${repository#*/}
        fi
        # Add the PR number as a suffix for deploy previews
        if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            APP_NAME=$APP_NAME-$EVENT_NUMBER
        fi
        echo "::set-output name=app_name::$APP_NAME"
      env:
        APP_NAME: ${{ inputs.app_name }}
        EVENT_NUMBER: ${{github.event.number}}
    - name: Create app if it does not exist
      shell: bash
      run: |
        # Create the app if it does not already exist
        exists=$(de --no-keyfile apps exists -n $APP_NAME)
        if [[ $exists == *"App [$APP_NAME] does not exist on [$DASH_ENTERPRISE_HOST]."* ]]; then
          de --no-keyfile apps create -n $APP_NAME
        fi
      env:
        DASH_ENTERPRISE_HOST: ${{ inputs.DE_HOST }}
        DASH_ENTERPRISE_USERNAME: ${{ inputs.DE_USERNAME }}
        DASH_ENTERPRISE_PASSWORD: ${{ inputs.DE_PASSWORD }}
        APP_NAME: ${{ steps.app_name.outputs.app_name }}
    - name: Generate details link as commit status
      shell: bash
      if: github.event.action != 'closed'
      run: |
        curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json"\
          -H "Authorization: Bearer ${{inputs.GH_ACCESS_TOKEN}}"\
          -H "X-GitHub-Api-Version: 2022-11-28"\
          https://api.github.com/repos/${{ github.repository }}/statuses/${{github.event.pull_request.head.sha || github.sha}}\
          -d '{"state":"success","target_url":"https://${{ inputs.DE_HOST }}/apps/${{ steps.app_name.outputs.app_name }}","description":"App manager ready!","context":"deploy/${{ steps.app_name.outputs.app_name }}"}'
    - name: Inject code and deploy
      shell: bash
      if: github.event.action != 'closed'
      run: |
        de --no-keyfile deploy ${{ inputs.app_directory }} --name ${{ steps.app_name.outputs.app_name }} --message "Deployed commit: $GITHUB_SHA" -y
        de --no-keyfile apps update --name ${{ steps.app_name.outputs.app_name }}
      env:
        DASH_ENTERPRISE_HOST: ${{inputs.DE_HOST}}
        DASH_ENTERPRISE_PASSWORD: ${{inputs.DE_PASSWORD}}
        DASH_ENTERPRISE_USERNAME: ${{inputs.DE_USERNAME}}
    - name: Remove staging application
      shell: bash
      if: github.event.action == 'closed'
      run: |
        de --no-keyfile apps delete --name ${{ steps.app_name.outputs.app_name }}
      env:
        DASH_ENTERPRISE_PASSWORD: ${{inputs.DE_PASSWORD}}
        DASH_ENTERPRISE_HOST: ${{inputs.DE_HOST}}
        DASH_ENTERPRISE_USERNAME: ${{inputs.DE_USERNAME}}


branding:
  icon: activity
  color: purple
