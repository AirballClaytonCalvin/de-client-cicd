name: Dash App Deploy

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install de-client
      shell: bash
      run: |
        python -m pip install --upgrade pip
        if [ -z "${{ inputs.de_client_version }}" ]; then
          # If no version is specified, install the latest version
          pip install de-client --extra-index-url=https://${{ inputs.DE_HOST }}/packages
        else
          # Install the specified version
          pip install de-client==${{ inputs.de_client_version }} --extra-index-url=https://${{ inputs.DE_HOST }}/packages
        fi
    - name: Generate app name
      id: app_name
      shell: bash
      run: |
        # If an app name is not provided, use the repository name as the app name
        if [ -z "$APP_NAME" ]; then
            repository="$GITHUB_REPOSITORY"
            APP_NAME=${repository#*/}
        fi
        # Add the PR number as a suffix for deploy previews
        if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            APP_NAME=$APP_NAME-$EVENT_NUMBER
        fi
        echo "::set-output name=app_name::$APP_NAME"
      env:
        APP_NAME: ${{ inputs.app_name }}
        EVENT_NUMBER: ${{github.event.number}}
    - name: Create app if it does not exist
      shell: bash
      run: |
        # Create the app if it does not already exist
        exists=$(de --no-keyfile apps exists -n $APP_NAME)
        if [[ $exists == *"App [$APP_NAME] does not exist on [$DASH_ENTERPRISE_HOST]."* ]]; then
          de --no-keyfile apps create -n $APP_NAME
        fi
      env:
        DASH_ENTERPRISE_HOST: ${{ secrets.DE_HOST }}
        DASH_ENTERPRISE_USERNAME: ${{ secrets.DE_USERNAME }}
        DASH_ENTERPRISE_PASSWORD: ${{ secrets.DE_PASSWORD }}
        APP_NAME: ${{ steps.app_name.outputs.app_name }}
    - name: Generate details link as commit status
      shell: bash
      if: github.event.action != 'closed'
      run: |
        curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json"\
          -H "Authorization: Bearer ${{inputs.GH_ACCESS_TOKEN}}"\
          -H "X-GitHub-Api-Version: 2022-11-28"\
          https://api.github.com/repos/${{ github.repository }}/statuses/${{github.event.pull_request.head.sha || github.sha}}\
          -d '{"state":"success","target_url":"https://${{ inputs.DE_HOST }}/apps/${{ steps.app_name.outputs.app_name }}","description":"App manager ready!","context":"deploy/${{ steps.app_name.outputs.app_name }}"}'
    - name: Inject code and deploy
      shell: bash
      if: github.event.action != 'closed'
      run: |
        de --no-keyfile deploy ${{ inputs.app_directory }} --name ${{ steps.app_name.outputs.app_name }} --message "Deployed commit: $GITHUB_SHA" -y
        de --no-keyfile apps update --name ${{ steps.app_name.outputs.app_name }} --add-group-co-owner "${{ inputs.group_co_owners }}" --add-group-viewer "${{ inputs.group_viewers }}"
      env:
        DASH_ENTERPRISE_HOST: ${{secrets.DE_HOST}}
        DASH_ENTERPRISE_PASSWORD: ${{secrets.DE_PASSWORD}}
        DASH_ENTERPRISE_USERNAME: ${{secrets.DE_USERNAME}}

branding:
  icon: activity
  color: purple
